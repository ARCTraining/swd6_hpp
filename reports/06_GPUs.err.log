Traceback (most recent call last):
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
@vectorize(["float32(float32)"], target="cuda")
def my_serial_function_for_gpu(x):
    return math.cos(x) ** 2 + math.sin(x) ** 2
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mCudaSupportError[0m                          Traceback (most recent call last)
Cell [0;32mIn[9], line 2[0m
[1;32m      1[0m [38;5;129;43m@vectorize[39;49m[43m([49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mfloat32(float32)[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m[43m [49m[43mtarget[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcuda[39;49m[38;5;124;43m"[39;49m[43m)[49m
[0;32m----> 2[0m [38;5;28;43;01mdef[39;49;00m[38;5;250;43m [39;49m[38;5;21;43mmy_serial_function_for_gpu[39;49m[43m([49m[43mx[49m[43m)[49m[43m:[49m
[1;32m      3[0m [43m    [49m[38;5;28;43;01mreturn[39;49;00m[43m [49m[43mmath[49m[38;5;241;43m.[39;49m[43mcos[49m[43m([49m[43mx[49m[43m)[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43m [49m[38;5;241;43m2[39;49m[43m [49m[38;5;241;43m+[39;49m[43m [49m[43mmath[49m[38;5;241;43m.[39;49m[43msin[49m[43m([49m[43mx[49m[43m)[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43m [49m[38;5;241;43m2[39;49m

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/np/ufunc/decorators.py:131[0m, in [0;36mvectorize.<locals>.wrap[0;34m(func)[0m
[1;32m    129[0m vec [38;5;241m=[39m Vectorize(func, [38;5;241m*[39m[38;5;241m*[39mkws)
[1;32m    130[0m [38;5;28;01mfor[39;00m sig [38;5;129;01min[39;00m ftylist:
[0;32m--> 131[0m     [43mvec[49m[38;5;241;43m.[39;49m[43madd[49m[43m([49m[43msig[49m[43m)[49m
[1;32m    132[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(ftylist) [38;5;241m>[39m [38;5;241m0[39m:
[1;32m    133[0m     vec[38;5;241m.[39mdisable_compile()

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/np/ufunc/deviceufunc.py:391[0m, in [0;36mDeviceVectorize.add[0;34m(self, sig)[0m
[1;32m    388[0m funcname [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mpyfunc[38;5;241m.[39m[38;5;18m__name__[39m
[1;32m    389[0m kernelsource [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_kernel_source([38;5;28mself[39m[38;5;241m.[39m_kernel_template,
[1;32m    390[0m                                        devfnsig, funcname)
[0;32m--> 391[0m corefn, return_type [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_compile_core[49m[43m([49m[43mdevfnsig[49m[43m)[49m
[1;32m    392[0m glbl [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_globals(corefn)
[1;32m    393[0m sig [38;5;241m=[39m signature(types[38;5;241m.[39mvoid, [38;5;241m*[39m([a[:] [38;5;28;01mfor[39;00m a [38;5;129;01min[39;00m args] [38;5;241m+[39m [return_type[:]]))

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/vectorizers.py:202[0m, in [0;36mCUDAVectorize._compile_core[0;34m(self, sig)[0m
[1;32m    201[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21m_compile_core[39m([38;5;28mself[39m, sig):
[0;32m--> 202[0m     cudevfn [38;5;241m=[39m [43mcuda[49m[38;5;241;43m.[39;49m[43mjit[49m[43m([49m[43msig[49m[43m,[49m[43m [49m[43mdevice[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43minline[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mpyfunc[49m[43m)[49m
[1;32m    203[0m     [38;5;28;01mreturn[39;00m cudevfn, cudevfn[38;5;241m.[39moverloads[sig[38;5;241m.[39margs][38;5;241m.[39msignature[38;5;241m.[39mreturn_type

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/decorators.py:131[0m, in [0;36mjit.<locals>._jit[0;34m(func)[0m
[1;32m    129[0m     [38;5;28;01mfrom[39;00m[38;5;250m [39m[38;5;21;01mnumba[39;00m[38;5;21;01m.[39;00m[38;5;21;01mcore[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m typeinfer
[1;32m    130[0m     [38;5;28;01mwith[39;00m typeinfer[38;5;241m.[39mregister_dispatcher(disp):
[0;32m--> 131[0m         [43mdisp[49m[38;5;241;43m.[39;49m[43mcompile_device[49m[43m([49m[43margtypes[49m[43m,[49m[43m [49m[43mrestype[49m[43m)[49m
[1;32m    132[0m [38;5;28;01melse[39;00m:
[1;32m    133[0m     disp[38;5;241m.[39mcompile(argtypes)

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/dispatcher.py:882[0m, in [0;36mCUDADispatcher.compile_device[0;34m(self, args, return_type)[0m
[1;32m    875[0m fastmath [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mtargetoptions[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mfastmath[39m[38;5;124m'[39m)
[1;32m    877[0m nvvm_options [38;5;241m=[39m {
[1;32m    878[0m     [38;5;124m'[39m[38;5;124mopt[39m[38;5;124m'[39m: [38;5;241m3[39m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mtargetoptions[38;5;241m.[39mget([38;5;124m'[39m[38;5;124mopt[39m[38;5;124m'[39m) [38;5;28;01melse[39;00m [38;5;241m0[39m,
[1;32m    879[0m     [38;5;124m'[39m[38;5;124mfastmath[39m[38;5;124m'[39m: fastmath
[1;32m    880[0m }
[0;32m--> 882[0m cc [38;5;241m=[39m [43mget_current_device[49m[43m([49m[43m)[49m[38;5;241m.[39mcompute_capability
[1;32m    883[0m cres [38;5;241m=[39m compile_cuda([38;5;28mself[39m[38;5;241m.[39mpy_func, return_type, args,
[1;32m    884[0m                     debug[38;5;241m=[39mdebug,
[1;32m    885[0m                     lineinfo[38;5;241m=[39mlineinfo,
[0;32m   (...)[0m
[1;32m    888[0m                     nvvm_options[38;5;241m=[39mnvvm_options,
[1;32m    889[0m                     cc[38;5;241m=[39mcc)
[1;32m    890[0m [38;5;28mself[39m[38;5;241m.[39moverloads[args] [38;5;241m=[39m cres

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/api.py:443[0m, in [0;36mget_current_device[0;34m()[0m
[1;32m    441[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mget_current_device[39m():
[1;32m    442[0m     [38;5;124m"[39m[38;5;124mGet current device associated with the current thread[39m[38;5;124m"[39m
[0;32m--> 443[0m     [38;5;28;01mreturn[39;00m [43mcurrent_context[49m[43m([49m[43m)[49m[38;5;241m.[39mdevice

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/cudadrv/devices.py:220[0m, in [0;36mget_context[0;34m(devnum)[0m
[1;32m    216[0m [38;5;28;01mdef[39;00m[38;5;250m [39m[38;5;21mget_context[39m(devnum[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    217[0m [38;5;250m    [39m[38;5;124;03m"""Get the current device or use a device by device number, and[39;00m
[1;32m    218[0m [38;5;124;03m    return the CUDA context.[39;00m
[1;32m    219[0m [38;5;124;03m    """[39;00m
[0;32m--> 220[0m     [38;5;28;01mreturn[39;00m [43m_runtime[49m[38;5;241;43m.[39;49m[43mget_or_create_context[49m[43m([49m[43mdevnum[49m[43m)[49m

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/cudadrv/devices.py:138[0m, in [0;36m_Runtime.get_or_create_context[0;34m(self, devnum)[0m
[1;32m    136[0m attached_ctx [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_attached_context()
[1;32m    137[0m [38;5;28;01mif[39;00m attached_ctx [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 138[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_or_create_context_uncached[49m[43m([49m[43mdevnum[49m[43m)[49m
[1;32m    139[0m [38;5;28;01melse[39;00m:
[1;32m    140[0m     [38;5;28;01mreturn[39;00m attached_ctx

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/cudadrv/devices.py:153[0m, in [0;36m_Runtime._get_or_create_context_uncached[0;34m(self, devnum)[0m
[1;32m    147[0m [38;5;250m[39m[38;5;124;03m"""See also ``get_or_create_context(devnum)``.[39;00m
[1;32m    148[0m [38;5;124;03mThis version does not read the cache.[39;00m
[1;32m    149[0m [38;5;124;03m"""[39;00m
[1;32m    150[0m [38;5;28;01mwith[39;00m [38;5;28mself[39m[38;5;241m.[39m_lock:
[1;32m    151[0m     [38;5;66;03m# Try to get the active context in the CUDA stack or[39;00m
[1;32m    152[0m     [38;5;66;03m# activate GPU-0 with the primary context[39;00m
[0;32m--> 153[0m     [38;5;28;01mwith[39;00m driver[38;5;241m.[39mget_active_context() [38;5;28;01mas[39;00m ac:
[1;32m    154[0m         [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ac:
[1;32m    155[0m             [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_activate_context_for([38;5;241m0[39m)

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/cudadrv/driver.py:495[0m, in [0;36m_ActiveContext.__enter__[0;34m(self)[0m
[1;32m    493[0m [38;5;28;01melse[39;00m:
[1;32m    494[0m     hctx [38;5;241m=[39m drvapi[38;5;241m.[39mcu_context([38;5;241m0[39m)
[0;32m--> 495[0m     [43mdriver[49m[38;5;241;43m.[39;49m[43mcuCtxGetCurrent[49m(byref(hctx))
[1;32m    496[0m     hctx [38;5;241m=[39m hctx [38;5;28;01mif[39;00m hctx[38;5;241m.[39mvalue [38;5;28;01melse[39;00m [38;5;28;01mNone[39;00m
[1;32m    498[0m [38;5;28;01mif[39;00m hctx [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:

File [0;32m/usr/share/miniconda/envs/swd6_hpp/lib/python3.9/site-packages/numba/cuda/cudadrv/driver.py:295[0m, in [0;36mDriver.__getattr__[0;34m(self, fname)[0m
[1;32m    292[0m [38;5;28mself[39m[38;5;241m.[39mensure_initialized()
[1;32m    294[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39minitialization_error [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 295[0m     [38;5;28;01mraise[39;00m CudaSupportError([38;5;124m"[39m[38;5;124mError at driver init: [39m[38;5;130;01m\n[39;00m[38;5;132;01m%s[39;00m[38;5;124m:[39m[38;5;124m"[39m [38;5;241m%[39m
[1;32m    296[0m                            [38;5;28mself[39m[38;5;241m.[39minitialization_error)
[1;32m    298[0m [38;5;28;01mif[39;00m USE_NV_BINDING:
[1;32m    299[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_cuda_python_wrap_fn(fname)

[0;31mCudaSupportError[0m: Error at driver init: 

CUDA driver library cannot be found.
If you are sure that a CUDA driver is installed,
try setting environment variable NUMBA_CUDA_DRIVER
with the file path of the CUDA driver shared library.
:

